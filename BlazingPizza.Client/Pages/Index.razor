@page "/"
<!--from c# but we can communicate with server to put that in a function go get data from somewhere-->
@inject HttpClient HttpClient
<!--This Division takes individual special pizza from the list and apply the same appearance rule
    to all of them to represent them with hover effects, images, descriptions, and prizes.-->
@* Here I need to check the card effect howw they achieve that *@

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<!--right side pane for displaying the configured pizzas in the current order.-->

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(order.Pizzas.Count == 0)" @onclick="PlaceOrder">
            Order >
        </button>
    </div>
</div>

<!--show the ConfigurePizzaDialog when a pizza special has been selected.
    The ConfigurePizzaDialog is styled to overlay the current page,
    so it doesn't really matter where you put this code block.-->
<!--Here ConfigurePizzaDialog tag refers to the page and
    referances the attributes at the page-->

@if (showingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="configuringPizza"
                          OnCancel="CancelConfigurePizzaDialog"
                          OnConfirm="ConfirmConfigurePizzaDialog" />


}

<!--This code deals with the list, gethers from server using HTTP client and uses java async to see
    whether the list is upgraded or not. -->



@code{
    /// for tracking the pizza being customized and
    // whether the pizza customization dialog is visible

    List<PizzaSpecial> specials;
    Pizza configuringPizza;
    bool showingConfigureDialog;

    // When the OnConfirm event is fired, the customized pizza should be added to the user's order.
    // Add an Order field to the Index component to track the user's order.
    Order order = new Order();

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    void ShowConfigurePizzaDialog(PizzaSpecial special)
    {
        configuringPizza = new Pizza()
        {
            Special = special,
            SpecialId = special.Id,
            Size = Pizza.DefaultSize,
            Toppings = new List<PizzaTopping>(),
        };

        showingConfigureDialog = true;
    }

    // This event that hides the dialog and empties the configuring pizza
    void CancelConfigurePizzaDialog()
    {
        configuringPizza = null;
        showingConfigureDialog = false;
    }

    // OnConfirm event that adds the configured pizza to the order and empties the configuring pizza
    void ConfirmConfigurePizzaDialog()
    {
        order.Pizzas.Add(configuringPizza);
        configuringPizza = null;

        showingConfigureDialog = false;
    }

    // component for removing a configured pizza from the order
    void RemoveConfiguredPizza(Pizza pizza)
    {
        order.Pizzas.Remove(pizza);
    }

    // component for submitting the order
    async Task PlaceOrder()
    {
        await HttpClient.PostAsJsonAsync("orders", order);
        order = new Order();
    }
}

